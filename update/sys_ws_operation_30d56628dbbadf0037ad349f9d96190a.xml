<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri>/api/x_ibmg3_hcms/brokerrequest/updateCI</default_operation_uri>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>updateCI</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    try {
	
	
	//Define the payload
	var body = request.body.data;
		
	//Log the body of the incoming API request
	var strIncomingRequest = JSON.stringify(body); 
	gs.info("API - Cloud Broker Update CI Record(s) - Request Payload: " + strIncomingRequest);
		
	//Set a variable to establish a baseline for the validation check
	var validationError = "false";
	
	//Validate the Base elements
	validateBaseElements(body);
		
	//Testing
	//gs.info("CI API, #1:");
		
	//Defining variables
	var correlationID = body.u_correlation_id;
	var providerName = body.u_provider_name;
	var attributes = body.u_attributes;
	var updateStatus;
	var installStatus = body.u_install_status;
	var operationalStatus = body.u_operational_status;
	
	//Define the tracking variables 
	var trackingIDs = body.u_tracking_info;
	var	stackID, deploymentID, requestID, resourceGroupID;
	var	trackingField, stackID_value, deploymentID_value, requestID_value, resourceGroupID_value;
	
	for (var i=0; i< trackingIDs.length; i++) {
		
		if (trackingIDs[i].name == "stack_id"){
			//Indicate stackID attribute is present
			stackID = "true";
			trackingField = trackingIDs[i].name;
			stackID_value = trackingIDs[i].value;
		}
		if (trackingIDs[i].name == "deployment_id"){
			//Indicate deploymentID attribute is present
			deploymentID = "true";
			trackingField = trackingIDs[i].name;
			deploymentID_value = trackingIDs[i].value;
		}
		if (trackingIDs[i].name == "request_id"){
			//Indicate requestID attribute is present
			requestID = "true";
			trackingField = trackingIDs[i].name;
			requestID_value = trackingIDs[i].value;
		}
		if (trackingIDs[i].name == "resource_group_id"){
			//Indicate resourceGroupID attribute is present
			resourceGroupID = "true";
			resourceGroupID_value = trackingIDs[i].value;
		}

	
	}// end for
	
	//Testing
	//gs.info("CI API, #2:");
	 
	if(validationError == "false") {
		
		var gr = new GlideRecord('cmdb_ci_vm_object');
		gr.addQuery('correlation_id', correlationID);
		gr.query();
	
		//Process the found record
		if(gr.next()) {
			
			//Testing
			gs.info("CI Found Again, SysID: " + gr.getUniqueValue());
			
			//Set the values for the virtual server record
			gr.setValue("short_description", providerName);
			gr.setValue("install_status", installStatus);
			gr.setValue("operational_status", operationalStatus);
			
			var attributesString = JSON.stringify(attributes);
			gr.setValue("attributes", attributesString);
			
			//Set the value for the tracking IDs that are present in the payload
			if (stackID == "true"){
				//Set trackingField value and stack ID
				gr.setValue("x_ibmg3_hcms_tracking_field", trackingField);
				gr.setValue("object_id", stackID_value);
			}
			if (deploymentID == "true"){
				//Set trackingField value and deployment ID 
				gr.setValue("x_ibmg3_hcms_tracking_field", trackingField);
				gr.setValue("object_id", deploymentID_value);
			}
			if (requestID == "true"){
				//Set trackingField value and request ID
				gr.setValue("x_ibmg3_hcms_tracking_field", trackingField);
				gr.setValue("object_id", requestID_value);
			}
			if (resourceGroupID == "true"){
				//Set resource group ID
				gr.setValue("x_ibmg3_hcms_tracking_resource_group_id", resourceGroupID_value);
			}

			
			//Update the CI Record
			gr.update();
	
		}
		
	//Testing
	//gs.info("CI API, #3:");
		
	//Update the status of the CI update
	updateStatus = "CI Updated Successfully";

	 //Create a time stamp for the response
	 //var responseTimeStamp = gs.nowDateTime();
		
	 //Set the value for the response payload
	 //var SuccessResponsePayload = {"ResponseTS" : responseTimeStamp, "u_correlation_id":correlationID, "status": updateStatus};
	 var SuccessResponsePayload = {"u_correlation_id":correlationID, "status": updateStatus};

	 
	//Testing
	//gs.info("CI API, #4:");
		
	//Log the body of the outgoing API response
	 var strCreateServersResponse = JSON.stringify(SuccessResponsePayload); 
	 gs.info("API - Broker - Update CI Record - Response Payload: " + strCreateServersResponse);		
		
	//Testing
	//gs.info("CI API, #5:");
		
	 //Set the response body
	 response.setBody(SuccessResponsePayload);
	 
	 
 } // end if - validation error
	
	
	return {
		
		//response body already defined and added to the response object
		
	};	
}// end try
catch(err) {
	gs.info("API - Cloud Broker - Update CI API Error: " + this.type + "(" + err.message + ")" );
	
	var catchBody = request.body.data;
	var catchCorrelationID = catchBody.u_correlation_id;
	//Update the status of the CI update
	var failedUpdateStatus = "CI Update Failed";
	var failureResponsePayload = {"u_correlation_id":catchCorrelationID, "status": failedUpdateStatus};

	//Set the response body
	response.setBody(failureResponsePayload);
	
}
	

	//** Payload Validation Functions *********************
	
	//Function to validate the base level elements
	function validateBaseElements(bBody){
	
		//u_correlation_id
		if (!bBody.u_correlation_id){
			validationError = "true";
			raiseResponseError("u_correlation_id attribute missing");
		}
		if (empty(bBody.u_correlation_id)){
			validationError = "true";
			raiseResponseError("u_correlation_id attribute bad value");
		}
		
		//u_provider_name
		if (!bBody.u_provider_name){
			validationError = "true";
			raiseResponseError("u_provider_name attribute missing");
		}
		if (empty(bBody.u_provider_name)){
			validationError = "true";
			raiseResponseError("u_provider_name attribute bad value");
		}
		//Ensure an expected provider name is present in the payload
		//if (bBody.u_provider_name !== "amazon" | bBody.u_provider_name !== "azure" | bBody.u_provider_name !== "google" | bBody.u_provider_name !== "vmware" | bBody.u_provider_name !== "softlayer"){
			//validationError = "true";
			//raiseResponseError("u_provider_name attribute has an unexpected value");
		//}
		
		
		//Determine if the tracking field is present based on the provider
		var uTrackingInfoArray = bBody.u_tracking_info;
		var stackIdPresent = "false";
		var deploymentIDPresent = "false";
		var requestIDPresent = "false";
		var resourceGroupIDPresent = "false";
	    
		//loop through the tracking info array
		for (var p=0; p< uTrackingInfoArray.length; p++) {
				
			//check for stack id
			if(uTrackingInfoArray[p].name == "stack_id"){
				
				//set the stack id flag as true
				stackIdPresent = 'true';
			}
			
			//check for deployment id
			if(uTrackingInfoArray[p].name == "deployment_id"){
				
				//set the deployment id flag as true
				deploymentIDPresent = 'true';
			}
			
			//check for request id
			if(uTrackingInfoArray[p].name == "request_id"){
				
				//set the request id flag as true
				requestIDPresent = 'true';
			}
			
			//check for resource group id
			if(uTrackingInfoArray[p].name == "resource_group_id"){
				
				//set the resource group id flag as true
				resourceGroupIDPresent = 'true';
			}

		}
		//Perform the provider validations
		if(bBody.u_provider_name == "amazon"){
			
			if(stackIdPresent == "false"){
				//Raise error if stack_id is not present
				validationError = "true";
				raiseResponseError("stack_id attribute not present for Amazon Provider");
			}

		}//end amazon
		
		//Perform the google validation
		if(bBody.u_provider_name == "google"){
			
			if(requestIDPresent == "false"){
				//Raise error if request_id is not present
				validationError = "true";
				raiseResponseError("request_id attribute not present for Google Provider");
			}
		} //end google

		//Perform the VMware validation
		if(bBody.u_provider_name == "vmware"){
			
			if(requestIDPresent == "false"){
				//Raise error if request_id is not present
				validationError = "true";
				raiseResponseError("request_id attribute not present for VMware Provider");
			}
		}//end vmware
			
		//Perform the SoftLayer validation
		if(bBody.u_provider_name == "softlayer"){
			
			if(requestIDPresent == "false"){
				//Raise error if request_id is not present
				validationError = "true";
				raiseResponseError("request_id attribute not present for SoftLayer Provider");
			}
		}//end SoftLayer
		
		//Perform the azure validation
		if(bBody.u_provider_name == "azure"){
			
			if(deploymentIDPresent == "false"){
				//Raise error if deployment_id is not present
				validationError = "true";
				raiseResponseError("deployment_id attribute not present for Azure Provider");
			}
			if(resourceGroupIDPresent == "false"){
				//Raise error if resource_group_id is not present
				validationError = "true";
				raiseResponseError("resource_group_id attribute not present for Azure Provider");
			}
		}//end azure
		

		//u_tracking_info
		if (!bBody.u_tracking_info){
			validationError = "true";
			raiseResponseError("u_tracking_info attribute missing");
		}
		if (bBody.u_tracking_info){
			//var uTrackingInfoArray = bBody.u_tracking_info;
			//gs.info("uTrackingInfoArray.length:" + uTrackingIdArray.length);
			if (uTrackingInfoArray.length == 0){
				validationError = "true";
				raiseResponseError("u_tracking_info array has no array members");
			}
			else if (uTrackingInfoArray.length > 0){
				
				for (var i=0; i< uTrackingInfoArray.length; i++) {
			 
					//Define variables for the attributes for each array item
					var name = uTrackingInfoArray[i].name;
					var value = uTrackingInfoArray[i].value;
					var iPlus1 = i + 1;
					
					//Testing
					//gs.info("name: " + name);
					//gs.info("value: " + value);
	
					//name
					if (!name){
						validationError = "true";
						raiseResponseError("u_tracking_info array name(" + iPlus1 + ") attribute missing");
					}
					if (empty(name)){
						validationError = "true";
						raiseResponseError("u_tracking_info array name(" + iPlus1 + ") attribute bad value");
					}
		
					//value
					if (!value){
						validationError = "true";
						raiseResponseError("u_tracking_info array value(" + iPlus1 + ") attribute missing");
					}
					if (empty(value)){
						validationError = "true";
						raiseResponseError("u_tracking_info array value(" + iPlus1 + ") attribute bad value");
					}
				} //end for
			} // end else
		}// end if - bBody.u_tracking_info

		//u_attributes - optional
		//if (!bBody.u_attributes){
			//validationError = "true";
			//raiseResponseError("u_attributes attribute missing");
		//}
		if (bBody.u_attributes){
			var uAttributesArray = bBody.u_attributes;
			//gs.info("uAttributesArray.length:" + uAttributesArray.length);
			if (uAttributesArray.length == 0){
				validationError = "true";
				raiseResponseError("u_attributes array has no array members");
			}
			else if (uAttributesArray.length > 0){
				
				for (var q=0; q< uAttributesArray.length; q++) {
			 
					//Define variables for the attributes for each array item
					var nameAttributes = uAttributesArray[q].name;
					var valueAttributes = uAttributesArray[q].value;
					var qPlus1 = q + 1;
	
					//name
					if (!nameAttributes){
						validationError = "true";
						raiseResponseError("attributes array name(" + qPlus1 + ") attribute missing");
					}
					if (empty(nameAttributes)){
						validationError = "true";
						raiseResponseError("attributes array name(" + qPlus1 + ") attribute bad value");
					}
		
					//value
					if (!valueAttributes){
						validationError = "true";
						raiseResponseError("attributes array value(" + qPlus1 + ") attribute missing");
					}
					if (empty(valueAttributes)){
						validationError = "true";
						raiseResponseError("attributes array value(" + qPlus1 + ") attribute bad value");
					}
				} //end for
			} // end else
		}// end if - bBody.u_tracking_id	
	}// end validateBaseElements

	//Function to handle string tests
	function empty(e) {
  
		//Test the string
		switch (e) {
			case "":
				return true;
			case 0:
				return true;
			case "0":
				return true;
			case null:
				return true;
			//case false:
			case typeof this == "undefined":
			  return true;
			default:
			  return false;
		 }
	}// end empty function
	
	//Function to handle response error messages
	function raiseResponseError(message) {
		
		//Raises a response error
		var theError = new sn_ws_err.ServiceError();
		theError.setStatus(403);
		theError.setMessage("JSON payload error.");
		theError.setDetail(message);
		response.setError(theError);
		
		//Log the error on processing the request
		gs.info("CREATE SERVER RECORD(S) REQUEST: ERROR: JSON payload error.");
		gs.info("CREATE SERVER RECORD(S) REQUEST: ERROR: " + message);
		              
	}// end raiseResponseError



})(request, response);]]></operation_script>
        <operation_uri>/api/x_ibmg3_hcms/v1/brokerrequest/updateCI</operation_uri>
        <produces>application/json</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/updateCI</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>false</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>rbbrandt@us.ibm.com</sys_created_by>
        <sys_created_on>2018-06-16 16:41:01</sys_created_on>
        <sys_id>30d56628dbbadf0037ad349f9d96190a</sys_id>
        <sys_mod_count>57</sys_mod_count>
        <sys_name>updateCI</sys_name>
        <sys_package display_value="IBM Hybrid Cloud Management" source="x_ibmg3_hcms">c5a89eb6db969b00e0f5325f9d96198a</sys_package>
        <sys_policy/>
        <sys_scope display_value="IBM Hybrid Cloud Management">c5a89eb6db969b00e0f5325f9d96198a</sys_scope>
        <sys_update_name>sys_ws_operation_30d56628dbbadf0037ad349f9d96190a</sys_update_name>
        <sys_updated_by>rannep12@in.ibm.com</sys_updated_by>
        <sys_updated_on>2018-07-25 06:25:08</sys_updated_on>
        <web_service_definition display_value="HCMS BrokerRequest_notused">585c282cdbe21b0037ad349f9d9619b1</web_service_definition>
        <web_service_version display_value="v1">e8dda4acdbe21b0037ad349f9d9619b5</web_service_version>
    </sys_ws_operation>
</record_update>
