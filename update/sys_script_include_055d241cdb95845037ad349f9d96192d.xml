<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmg3_hcms.RetryOutboundcalltoBroker</api_name>
        <client_callable>false</client_callable>
        <description>This Script include passes the response status to scheduled Job which runs every 10 minutes</description>
        <name>RetryOutboundcalltoBroker</name>
        <script><![CDATA[var RetryOutboundcalltoBroker = Class.create();
RetryOutboundcalltoBroker.prototype = {
    initialize: function() {},
    outBoundResponseCallStatus: function(obj) {
        try {
            new HCMSLogLevel().LogMsg("info", "* *");
            var httpStatus, endPoint, requestBody, number, response, responseBody, rm, ritm;
            if (obj.topic.endsWith("Approval")) {
                new HCMSLogLevel().LogMsg("info", "*Retrying Outbound Approval Call for :*" + obj.topic);
                var restMessageNameApp = gs.getProperty('x_ibmg3_hcms.Approval_Outbound_Rest_Msg');
                rm = new sn_ws.RESTMessageV2(restMessageNameApp, 'post');
            } else if (obj.topic.endsWith("PreProvisioning")) {
                new HCMSLogLevel().LogMsg("info", "*Retrying Outbound PreProvisioning Call for :*" + obj.topic);
                var restMessageNamePre = gs.getProperty('x_ibmg3_hcms.InitiateProvisioning_Outbound_Msg');
                rm = new sn_ws.RESTMessageV2(restMessageNamePre, 'post');
            } else if (obj.topic.endsWith("PostProvisioning")) {
                new HCMSLogLevel().LogMsg("info", "*Retrying Outbound PostProvisioning Call for :*" + obj.topic);
                var restMessageNamePost = gs.getProperty('x_ibmg3_hcms.Post_Provisioning _Rest_Msg');
                rm = new sn_ws.RESTMessageV2(restMessageNamePost, 'postProvisioning');
            }
            endPoint = rm.getEndpoint();
            rm.setRequestHeader("Content-Type", "application/json");
            rm.setRequestHeader("Accept", "Application/json");
            rm.setRequestHeader("Username", gs.getProperty('x_ibmg3_hcms.HCMS_Broker_user_name'));
            rm.setRequestHeader("Apikey", gs.getProperty('x_ibmg3_hcms.HCMS_Broker_API_Key'));
            requestBody = obj.payload;
            rm.setRequestBody(requestBody);
            rm.setLogLevel('all');
            //In milliseconds. Wait at most 10 seconds for response from http request.
            rm.setHttpTimeout(10000);
            response = rm.execute();
            responseBody = response.getBody();
            httpStatus = response.getStatusCode();
            new HCMSLogLevel().LogMsg("info", "*HttpStatus code on retry for :*" + obj.topic + "is : " + httpStatus);

            var req_for, sysIdAssignmentGroup = '';
            if (httpStatus > 201 || httpStatus == 0) {
                obj.sequence = parseInt(obj.sequence) + 1;
                obj.from_host = "Response received from broker : " + responseBody + "\nResponse status code : " + httpStatus;
                if (parseInt(obj.sequence) >= gs.getProperty('x_ibmg3_hcms.Outbound_Retry_Count')) {
                    // fetch requested for to update Incident caller field
                    var req = new GlideRecord('sc_request');
                    req.addQuery('number', obj.source);
                    req.query();
                    if (req.next()) {
                        req_for = req.requested_for;
                    }
                    //update the assignment group for the incident as Service Desk
                    var asgr = new GlideRecord('sys_user_group');
                    asgr.addQuery('name', 'Service Desk');
                    asgr.query();
                    if (asgr.next()) {
                        sysIdAssignmentGroup = asgr.getUniqueValue();
                    }
                    //create an incident after 3 retry attempt
                    var inc = new GlideRecord('incident');
                    inc.initialize();
                    inc.caller_id = req_for;
                    inc.assignment_group = sysIdAssignmentGroup;
                    inc.short_description = "Outbound call to api "+ endPoint + " failed after 3 retry for request :" + obj.source;
                    inc.comments = "Outbound Payload details : " + requestBody + "\nApi endpoint :" + endPoint;
                    inc.insert();
                    number = inc.number;
                    var reqtm = new GlideRecord('sc_req_item');
						if (obj.topic.endsWith("Approval"))
							reqtm.addQuery('request.number', obj.source);
						else
							reqtm.addQuery('number', obj.source);
						reqtm.query();
						while (reqtm.next()) {
							reqtm.comments = "Outbound call to api " + endPoint + " failed after 3 retry, Incident created : " + number;
							reqtm.update();
						}
						obj.state = 'error'; //set ecc record state to error
						obj.error_string = "Incident " + number + " created for failed outbound after 3 retry";
                }
            } else {
                obj.state = 'processed'; //set to proessed after successful outbound call
                var processedTime = new GlideDateTime();
                obj.processed = processedTime;
                obj.from_host = "Response received from broker : " + responseBody + "\nResponse status code : " + httpStatus;
                new HCMSLogLevel().LogMsg("info", "*Retry successful for Outbound Call :*" + obj.topic);
            }
            obj.update();
        } catch (e) {
            new HCMSLogLevel().LogMsg("error", "No Entry found in the ecc_queue table in ready status " + e);
        }
    },

    eccQueueRetryRecord: function(topic, source, payload, responsefromHost) {
        try {
            //initial and insert record in ecc queue to retry the failed outbound call
            var gr = new GlideRecord('ecc_queue');
            gr.initialize();
            gr.agent = "IBM Integrations";
            gr.topic = topic;
            gr.name = "ServiceNow MCMP";
            gr.source = source;
            gr.state = 'ready'; //set state to ready
            gr.queue = 'output';
            gr.sequence = 0;
            gr.payload = payload;
            gr.from_host = responsefromHost;
            gr.insert();
            new HCMSLogLevel().LogMsg("info", "*Retry record created in Ecc Queue for* " + topic);
        } catch (e) {
            new HCMSLogLevel().LogMsg("error", "Entry is not created successfully in ecc_queue table " + e);
        }
    },

    type: 'RetryOutboundcalltoBroker'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>debada54@in.ibm.com</sys_created_by>
        <sys_created_on>2019-11-19 12:15:25</sys_created_on>
        <sys_id>055d241cdb95845037ad349f9d96192d</sys_id>
        <sys_mod_count>40</sys_mod_count>
        <sys_name>RetryOutboundcalltoBroker</sys_name>
        <sys_package display_value="IBM Hybrid Cloud Management" source="x_ibmg3_hcms">c5a89eb6db969b00e0f5325f9d96198a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Hybrid Cloud Management">c5a89eb6db969b00e0f5325f9d96198a</sys_scope>
        <sys_update_name>sys_script_include_055d241cdb95845037ad349f9d96192d</sys_update_name>
        <sys_updated_by>debada54@in.ibm.com</sys_updated_by>
        <sys_updated_on>2019-12-11 10:00:07</sys_updated_on>
    </sys_script_include>
</record_update>
