<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmg3_hcms.generateSingleCart</api_name>
        <client_callable>false</client_callable>
        <description>Geenerate Request item(s) using scoped Cart API</description>
        <name>generateSingleCart</name>
        <script><![CDATA[/*
Scoped Cart API to create catalog item(s) and set variables and fields in catalog item
 */

var generateSingleCart = Class.create();
generateSingleCart.prototype = {
	initialize: function() {
	},
	
	processRequest: function(str,location,requestedFor){
		try {
			var parser =  JSON.parse(str);
			var specialInstructionsContent = parser.requestedItems;
			var msg = specialInstructionsContent.length;
			
			//Log Requested items count from the incoming payload
			new HCMSLogLevel().LogMsg('info','*Requested item count CART API '+parser.orderNumber+ ' :' +msg);
			
			var requested_For = requestedFor;
			var strShortDescription = parser.orderPurpose;
			var strDescription = parser.detailedComments;
			var brokerLocation = location;
			var broker_order_number = parser.orderNumber;
			var broker_request_type = parser.requestType;
			var catalogItemName = parser.catalog_item_name;
			var changeApprovalRequired = parser.changeApprovalRequired;
			if(changeApprovalRequired == "true")
				changeApprovalRequired = "normal";//Has change Approval
			else
				changeApprovalRequired = "standard";//No Approval
			new HCMSLogLevel().LogMsg('info','Enterprise_Marketplace_order_number' + broker_order_number);
			//Log the Request Type is new or terminate
			new HCMSLogLevel().LogMsg('info','Enterprise Marketplace Request Type CART API for order:'+broker_order_number+ ' '+broker_request_type);
			
			if(broker_request_type == 'New') {broker_request_type = '1';}
				if(broker_request_type == 'Terminate') {broker_request_type = '2';}
					if(broker_request_type == 'Edit') {broker_request_type = '3';}
						if(broker_request_type == 'operation') {broker_request_type = '4';}
							requestedFor = requestedFor.toString;
							var broker_json = str;
							var brokerOrderSubmittedDate = parser.orderSubmittedTime;
							var cart;
							var grSys_id;
							cart = new sn_sc.CartJS();
							cart.empty();
							
							//var catalogItemName= gs.getProperty('x_ibmg3_hcms.HCMS_Catalog_Item_Name');
							var gr=new GlideRecord('sc_cat_item');
							gr.addQuery('sys_name',catalogItemName);
							gr.query();
							if(gr.next()) {
								grSys_id = (gr.sys_id).toString();
							}
							
							/* Create one or more RITM based on payload */
							for(var i=0; i < specialInstructionsContent.length; i++) {
								cart = new sn_sc.CartJS();
								var arr=[];
								new HCMSLogLevel().LogMsg("info", "* Number of RITMS in the payload for order " +broker_order_number+ ' :'+ i );
								
								var itemServiceName = parser.requestedItems[i].serviceName;
								var serviceOfferingId =parser.requestedItems[i].serviceOfferingId;
								var soiID =parser.requestedItems[i].serviceOfferingInstanceId;
								var serviceProvider =parser.requestedItems[i].serviceOfferingProvider;
								var categoryID = parser.requestedItems[i].category;
								var serviceOfferingName = parser.requestedItems[i].serviceOfferingName;
								var ServiceOfferingDescription = parser.requestedItems[i].short_description;
								var item =
								{
									'sysparm_id': grSys_id, // Sys id of IBM Cloud Broker Provision catalog item: 'b64fe0ecdbe21b0037ad349f9d9619e3',
									'sysparm_quantity': '1',
									'variables':{
										'var_requested_for': requested_For,
										'short_description': ServiceOfferingDescription,
										'var_description': strDescription,
										'var_broker_location': brokerLocation,
										'order_number': broker_order_number,
										'var_request_type': broker_request_type,
										'var_broker_json': str,
										'var_order_date': brokerOrderSubmittedDate,
										'var_service_offering_id': serviceOfferingId,
										'var_service_instance_id': soiID,
										'var_service_name': itemServiceName,
										'var_offering_provider': serviceProvider,
										'var_consume_category':categoryID,
										'var_change_type' : changeApprovalRequired,
										'var_service_offering_name' : serviceOfferingName
									}
								};
								var cartDetails = cart.addToCart(item);
							}
							var CartItems  = cart.getCartItems();
							var str1 =  JSON.stringify(CartItems);
							var rc = cart.submitOrder({});
								new HCMSLogLevel().LogMsg('info','Request_number'+rc.request_number);
								return rc.request_number;
								
							}catch(ex){
								new HCMSLogLevel().LogMsg('error',"generate request using cart api error message "+ex);
							}
						},
						
						getRequestedFor : function(strvar){
							var requser_id = new GlideRecord('sys_user');
							requser_id.addEncodedQuery('email=' +strvar+'^ORuser_name =' +strvar);
							requser_id.query();
							if(requser_id.next()){
								new HCMSLogLevel().LogMsg('info','Request_for'+requser_id.sys_id);
								return requser_id.sys_id.toString();
							}
						},
						
						type: 'generateSingleCart'
					};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>rannep12@in.ibm.com</sys_created_by>
        <sys_created_on>2018-07-11 05:38:39</sys_created_on>
        <sys_id>676d38e8dbd31780e0f5325f9d961904</sys_id>
        <sys_mod_count>275</sys_mod_count>
        <sys_name>generateSingleCart</sys_name>
        <sys_package display_value="IBM Hybrid Cloud Management" source="x_ibmg3_hcms">c5a89eb6db969b00e0f5325f9d96198a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Hybrid Cloud Management">c5a89eb6db969b00e0f5325f9d96198a</sys_scope>
        <sys_update_name>sys_script_include_676d38e8dbd31780e0f5325f9d961904</sys_update_name>
        <sys_updated_by>asbagad1@in.ibm.com</sys_updated_by>
        <sys_updated_on>2020-04-16 12:03:32</sys_updated_on>
    </sys_script_include>
</record_update>
